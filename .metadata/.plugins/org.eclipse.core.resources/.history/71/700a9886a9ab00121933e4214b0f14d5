package com.yelp;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.codehaus.jackson.map.ObjectMapper;

import com.yelp.UserBusiness;
import com.yelp.BusinessMatrixRow;
import com.yelp.YelpDataSet1;
import com.yelp.YelpDataSet2;
import com.yelp.YelpDataSet3;





public class YelpUtils
{
	private String d1 = "C:\\Users\\fred\\Documents\\SJSU\\CMPE 239\\final project\\yelpdataset1.txt";	// users and reviews.
	private String d2 = "C:\\Users\\fred\\Documents\\SJSU\\CMPE 239\\final project\\yelpdataset2.txt";	// business id , user id, review id and full text of the review. Review object in original code.
	private String d3 = "C:\\Users\\fred\\Documents\\SJSU\\CMPE 239\\final project\\yelpdataset3.txt";	// business data
	
	private List<YelpDataSet1> list_alldata1;	
	private List<YelpDataSet2> list_alldata2;	
	private List<YelpDataSet3> list_alldata3;	
	
	public YelpUtils()
	{
		list_alldata1 = dataset1(d1);
		list_alldata2 = dataset2(d2);
		list_alldata3 = dataset3(d3);
	}
	
	public List<UserBusiness> getCompareUsers()
	{
		HashMap<String, Integer>  map1 = new HashMap<String,Integer>();	
		readmap1(map1);
		
		List<UserBusiness> list1  =  getUserBuslist(list_alldata1, list_alldata2,map1);
		List<UserBusiness> list2  =  getUserBuslist(list_alldata1, list_alldata2,map1);
		
		return compareusers(list1,list2);
	}
	public BusinessDetail getBusinessDetail(String id)
	{
		for(YelpDataSet3 d : list_alldata3)
		{
			
			if( d.getBusinessid().equals(id))
				return new BusinessDetail(d.getName(), d.getFulladdress(), d.getStars());
		}
		return null;
	}
	public List<UserBusiness> compareusers(List<UserBusiness> list1 , List<UserBusiness> list2)
	{
		List<UserBusiness> listnear = new ArrayList<UserBusiness>(); 
		
		for(UserBusiness d1 : list1)
		{
			String userid = d1.getUserid();
			List<String> listbus = d1.getBusinessIDs();
			List<String> near = new ArrayList<String>();
			
			List<String> nearbus = new ArrayList<String>();
			
			for(UserBusiness d2 : list2)
			{
				int countoftrue=0;
				
				if( d2.getUserid().equals(userid))
					continue;
				for(String str : listbus)
				{
					if(d2.getBusinessIDs().contains(str))
					{
						//System.out.println(str + "  " + d2.getUerid());
						countoftrue++;
						if(countoftrue>(listbus.size()*0.75))
						{
							near.add(d2.getUserid());
							nearbus.addAll(d2.getBusinessIDs());
							break;
						}
					}
				}
			}
			if(nearbus.size() != 0  ||  near.size() != 0 )
			{
				UserBusiness x = new UserBusiness(userid,nearbus,near , d1.getUserName(),d1.getUserUrl());
				listnear.add(x);
			}
		}
		return listnear;
	}
	public List<UserBusiness> getUserBuslist(List<YelpDataSet1> listusers , List<YelpDataSet2> list, HashMap<String, Integer> map1 )
	{
		int i = 0 ; 
		List<UserBusiness> listub = new ArrayList<UserBusiness>(); 
	
		for(YelpDataSet1 users : listusers)
		{  
			i++;
			List<String> busslist = new ArrayList<String>();
			for(YelpDataSet2 d : list)
			{
				if( users.getUserid().equals(d.getUserid()))
				{
					busslist.add(d.getBusinessid());
				}
			}
			UserBusiness x = new UserBusiness(users.getUserid(), busslist, null, users.getName(),users.getUrl());
					
			listub.add(x);
			
			if( i > 100)
				break;
		}
		return listub;
	}
	public static void main(String[] args)
	{
		YelpUtils y=new YelpUtils();
		List<Businesstypefilter>   busfil  = y.getBusinessMatrix();
		y.Printbusfil(busfil);
		
	}
	public void readmap1(HashMap<String, Integer> map1)
	{
		int i  =  0 ;
		for(YelpDataSet3 d : list_alldata3)
		{
			map1.put(d.getBusinessid(),  i++);	
		}
	}
	public List<Businesstypefilter> getBusinessMatrix()
	{
		// get business ratings that stars are above 3.
		HashMap<String, Integer> ratings = getBusinessRatings(3);
		//List<String> listBusCategoris = getBusinessCategories();
		// it has the list of all business with 10 columns if the business is 
		// one of those 10 it has 1 in the array.
		List<BusinessMatrixRow> listmatrix = getBusinessMatrix2();
		
		List<Businesstypefilter> busfil_list= new ArrayList<Businesstypefilter>();
		
		for(BusinessMatrixRow row : listmatrix)
		{
			// ratings has a the count of the reviews who has ratings above 3 ie.
			// business x has 5 ratings and they are all above 3.
			if(ratings.containsKey(row.getBusinessid()))
			{
				List<String> type=new ArrayList<String>();
				int[] temp = row.getcat();
				for(int i = 0 ; i < temp.length; i++)
				{	
					if(temp[i] == 1)
					{
						String type1=getcol(i);
						type.add(type1);
					}
				}
				if ( type.size() != 0)
				{
					Businesstypefilter busfil = getbusinessdetails(row.getBusinessid(),type);
					busfil_list.add(busfil);
				}
			}
		}
		//System.out.println("count::::::::::::::" + cnt);
		return busfil_list;
	}
	public Businesstypefilter getbusinessdetails(String businessid,List<String> type)
	{
		for(YelpDataSet3 d : list_alldata3)
		{
			if(businessid.equals(d.getBusinessid()))
			{
				Businesstypefilter busfil=new Businesstypefilter(d.getBusinessid(),type,d.getFulladdress(), d.getStars(), d.getName(),d.getReviewcount());
				return busfil;
			}
		}
		return null;
	}
	public void Printbusfil(List<Businesstypefilter> list)
	{
		for(Businesstypefilter d : list )
		{
			
			//List x = d.getbusiness_type();
				System.out.println("id::::" + d.getBusinessid() + "type:::" + d.getbusiness_type() + "stars::" + d.getstars());
		}
	}
	public String getcol(int i)
	{
		String ret=" ";
		switch ( i )
		{
			case 0 :
				ret = "Indian";
				break;
			case 1 :
				ret = "Korean";
				break;
			case 2 :
				ret =  "Greek";
				break;
			case 3 :
				ret =  "Mediterranean";
				break;
			case 4 :
				ret =  "Chinese";
				break;
			case 5 :
				ret = "French";
				break;
			case 6 :
				ret = "Thai";
				break;
			case 7 :
				ret =  "Japanese";
				break;
			case 8 :
				ret = "Mexican" ;
				break;
			case 9 :
				ret = "Italian";
				break;
		}
		return ret;
	}
	public List<BusinessMatrixRow> getBusinessMatrix2()
	{
		List<BusinessMatrixRow> listmatrix = new ArrayList<BusinessMatrixRow>();
		for(YelpDataSet3 d : list_alldata3)
		{
			List<String> listcat = d.getCategories();
			// if business has one of the categories put 1 else becomes 0
			BusinessMatrixRow row = new BusinessMatrixRow( d.getBusinessid(), listcat);
			listmatrix.add(row);
		}
		return listmatrix;	
	}
	public List<String> getBusinessCategories()
	{
		List<String> listcat = new ArrayList<String>();
		List<String> listcat2 = new ArrayList<String>();
		
		for(YelpDataSet3 d : list_alldata3)
		{
			ArrayList x = d.getCategories();
			if(x.contains("Restaurants"))
			{
				for(Object b : x)
				{
					if( !b.toString().equals("Restaurants")  && ( !listcat.contains(b.toString()) ) )
					{
						listcat.add(b.toString());
					}
				}
			}
		}
		for(String str : listcat)
		{
			if( str.equals("Indian") || str.equals("Korean") || str.equals("Greek") || str.equals("Mediterranean") ||
				str.equals("Chinese") || str.equals("French") || str.equals("Thai") || str.equals("Japanese") ||
				str.equals("Mexican") || str.equals("Italian") )
			{
				listcat2.add(str);
			}
		}
		return listcat2;
	}
	public HashMap<String, Integer>  getBusinessRatings(int rating)
	{
		HashMap<String, Integer> positive = new HashMap<String,Integer>(); 
		HashMap<String, Integer> negative =  new HashMap<String,Integer>(); 
		HashMap<String, Integer> result   = new HashMap<String,Integer>(); 
		
		// for each business add the number of reviews it has over and below ratings.
		for(YelpDataSet2 d : list_alldata2)
		{
			int x = Integer.parseInt(d.getStars()); 
			if( x >=   rating)
			{
				if(positive.containsKey(d.getBusinessid()))
				{
					positive.put(d.getBusinessid(),positive.get(d.getBusinessid()) + 1);
				}
				else
				{
					positive.put(d.getBusinessid(),1);
				}
			}
			else
			{
				if(negative.containsKey(d.getBusinessid()))
				{	
					negative.put(d.getBusinessid(),negative.get(d.getBusinessid()) + 1);
				}
				else
				{
					negative.put(d.getBusinessid(),1);
				}
			}
		}
		// a business can have above 3 or below 3 ratings ie + , - want to calcluate %.
		// result has the number of reviews over and 
		// the output of 2 means this business had 2 reviews and both were above 3.
		/*
		 * gneNNSYx2rz8KnbzyOMarg 3
			50V421e06Ck7LY-vvs06IA 11
			78JobzVEX0ZYwFp1kdfC7A 19
			ZiLOXVloAOtr9_cpQTpr8g 34
			56USR7ZY3Gsm4lR42yMQSg 91
			cnSXX4gGaEGy75BElLiSDw 10
			kJbrPeTsr5g2PCx2KQmRYw 2
			ojbummpklEQbas0mGi4tjw 19
		 */
		for (String eachKey: positive.keySet())
		{
			if( negative.containsKey(eachKey) )
			{
				float posvalue = positive.get(eachKey);
				float negvalue = negative.get(eachKey);
				float sum=posvalue+negvalue;
				
				float posper = ((posvalue /sum ) * 100);
				float negper = ((negvalue /sum ) * 100);
				if(posper > negper)
				{
					result.put(eachKey, positive.get(eachKey));
				}
			}
			else
			{
				result.put(eachKey, positive.get(eachKey));
			}
		} 
		return result;
	}
	public List<YelpDataSet1> dataset1(String filename)
	{
		List<YelpDataSet1> data = new ArrayList<YelpDataSet1>();	
		ObjectMapper mapper = new ObjectMapper();
		try 
		{
			Iterator<YelpDataSet1> it = mapper.reader(YelpDataSet1.class).readValues(new File(filename));
			while (it.hasNext())
			{
				YelpDataSet1 d = it.next();
				data.add(d);
			}	
		} 
		catch (IOException e)
		{
			e.printStackTrace();
		}
		return data;
	}
	public List<YelpDataSet2> dataset2(String filename)
	{
		List<YelpDataSet2> data = new ArrayList<YelpDataSet2>();	
		ObjectMapper mapper = new ObjectMapper();
		try 
		{
			Iterator<YelpDataSet2> it = mapper.reader(YelpDataSet2.class).readValues(new File(filename));
			while (it.hasNext())
			{
				YelpDataSet2 d = it.next();
				data.add(d);
			}	
		} 
		catch (IOException e)
		{
			e.printStackTrace();
		}
		return data;
	}
	public List<YelpDataSet3> dataset3(String filename)
	{
		List<YelpDataSet3> data = new ArrayList<YelpDataSet3>();	
		ObjectMapper mapper = new ObjectMapper();
		try 
		{
			Iterator<YelpDataSet3> it = mapper.reader(YelpDataSet3.class).readValues(new File(filename));
			while (it.hasNext())
			{
				YelpDataSet3 d = it.next();
				data.add(d);
				}	
		} 
		catch (IOException e)
		{
			e.printStackTrace();
		}
		return data;
	}

}
